// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Node {

static const char* NodeServer_method_names[] = {
  "/Node.NodeServer/Raft",
  "/Node.NodeServer/AddLog",
};

std::unique_ptr< NodeServer::Stub> NodeServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NodeServer::Stub> stub(new NodeServer::Stub(channel));
  return stub;
}

NodeServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Raft_(NodeServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddLog_(NodeServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NodeServer::Stub::Raft(::grpc::ClientContext* context, const ::Node::HardState& request, ::Node::Done* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Raft_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Node::Done>* NodeServer::Stub::AsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Node::Done>::Create(channel_.get(), cq, rpcmethod_Raft_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Node::Done>* NodeServer::Stub::PrepareAsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Node::Done>::Create(channel_.get(), cq, rpcmethod_Raft_, context, request, false);
}

::grpc::Status NodeServer::Stub::AddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::Node::Done* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddLog_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Node::Done>* NodeServer::Stub::AsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Node::Done>::Create(channel_.get(), cq, rpcmethod_AddLog_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Node::Done>* NodeServer::Stub::PrepareAsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Node::Done>::Create(channel_.get(), cq, rpcmethod_AddLog_, context, request, false);
}

NodeServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeServer::Service, ::Node::HardState, ::Node::Done>(
          std::mem_fn(&NodeServer::Service::Raft), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeServer::Service, ::Node::PutRequest, ::Node::Done>(
          std::mem_fn(&NodeServer::Service::AddLog), this)));
}

NodeServer::Service::~Service() {
}

::grpc::Status NodeServer::Service::Raft(::grpc::ServerContext* context, const ::Node::HardState* request, ::Node::Done* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeServer::Service::AddLog(::grpc::ServerContext* context, const ::Node::PutRequest* request, ::Node::Done* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Node

