// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto
#ifndef GRPC_message_2eproto__INCLUDED
#define GRPC_message_2eproto__INCLUDED

#include "message.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace Node {

class NodeServer final {
 public:
  static constexpr char const* service_full_name() {
    return "Node.NodeServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Raft(::grpc::ClientContext* context, const ::Node::HardState& request, ::Node::Done* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>> AsyncRaft(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>>(AsyncRaftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>> PrepareAsyncRaft(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>>(PrepareAsyncRaftRaw(context, request, cq));
    }
    virtual ::grpc::Status AddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::Node::Done* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>> AsyncAddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>>(AsyncAddLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>> PrepareAsyncAddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>>(PrepareAsyncAddLogRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>* AsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>* PrepareAsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>* AsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Node::Done>* PrepareAsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Raft(::grpc::ClientContext* context, const ::Node::HardState& request, ::Node::Done* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>> AsyncRaft(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>>(AsyncRaftRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>> PrepareAsyncRaft(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>>(PrepareAsyncRaftRaw(context, request, cq));
    }
    ::grpc::Status AddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::Node::Done* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>> AsyncAddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>>(AsyncAddLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>> PrepareAsyncAddLog(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Node::Done>>(PrepareAsyncAddLogRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::Node::Done>* AsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Node::Done>* PrepareAsyncRaftRaw(::grpc::ClientContext* context, const ::Node::HardState& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Node::Done>* AsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Node::Done>* PrepareAsyncAddLogRaw(::grpc::ClientContext* context, const ::Node::PutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Raft_;
    const ::grpc::internal::RpcMethod rpcmethod_AddLog_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Raft(::grpc::ServerContext* context, const ::Node::HardState* request, ::Node::Done* response);
    virtual ::grpc::Status AddLog(::grpc::ServerContext* context, const ::Node::PutRequest* request, ::Node::Done* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Raft() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, const ::Node::HardState* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRaft(::grpc::ServerContext* context, ::Node::HardState* request, ::grpc::ServerAsyncResponseWriter< ::Node::Done>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddLog() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLog(::grpc::ServerContext* context, const ::Node::PutRequest* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddLog(::grpc::ServerContext* context, ::Node::PutRequest* request, ::grpc::ServerAsyncResponseWriter< ::Node::Done>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Raft<WithAsyncMethod_AddLog<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Raft() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, const ::Node::HardState* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddLog() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddLog(::grpc::ServerContext* context, const ::Node::PutRequest* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Raft : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Raft() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Node::HardState, ::Node::Done>(std::bind(&WithStreamedUnaryMethod_Raft<BaseClass>::StreamedRaft, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Raft() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Raft(::grpc::ServerContext* context, const ::Node::HardState* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRaft(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Node::HardState,::Node::Done>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddLog : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddLog() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Node::PutRequest, ::Node::Done>(std::bind(&WithStreamedUnaryMethod_AddLog<BaseClass>::StreamedAddLog, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddLog() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddLog(::grpc::ServerContext* context, const ::Node::PutRequest* request, ::Node::Done* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Node::PutRequest,::Node::Done>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Raft<WithStreamedUnaryMethod_AddLog<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Raft<WithStreamedUnaryMethod_AddLog<Service > > StreamedService;
};

}  // namespace Node


#endif  // GRPC_message_2eproto__INCLUDED
